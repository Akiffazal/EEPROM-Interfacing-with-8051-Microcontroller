C51 COMPILER V9.60.7.0   24C02                                                             09/24/2024 16:44:00 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE 24C02
OBJECT MODULE PLACED IN .\Objects\24C02.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE 24C02.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\24C
                    -02.lst) TABS(2) OBJECT(.\Objects\24C02.obj)

line level    source

   1          #include "Includes.h"
   2          
   3          
   4          
   5          // Function Purpose: Write_Byte_To_24LC64_EEPROM writes a single byte on given address
   6          // Address can have any value fromm 0 to 0x1FFF, and DataByte can have a value of 0 to 0xFF.
   7          void Write_Byte_To_24LC64_EEPROM(unsigned int Address, unsigned char DataByte)
   8          {
   9   1        I2C_Start();                    // Start i2c communication
  10   1      
  11   1        // Send i2c address of 24LC64 with write command
  12   1        while(I2C_Write_Byte(Device_Address_24LC64_EEPROM + 0) == 1)// Wait until device is free
  13   1        { I2C_Start();  }   
  14   1      
  15   1        I2C_Write_Byte(Address>>8);             // Write Address upper byte
  16   1        I2C_Write_Byte((unsigned char)Address);       // Write Address lower byte
  17   1        I2C_Write_Byte(DataByte);             // Write data byte
  18   1        I2C_Stop();                     // Stop i2c communication
  19   1      }
  20          
  21          
  22          
  23          // Function Purpose: Read_Byte_From_24LC64_EEPROM reads a single byte from given address
  24          // Address can have any value fromm 0 to 0x1FFF.
  25          unsigned char Read_Byte_From_24LC64_EEPROM(unsigned int Address)
  26          {
  27   1        unsigned char Byte = 0;               // Variable to store Received byte
  28   1      
  29   1        I2C_Start();                    // Start i2c communication
  30   1      
  31   1        // Send i2c address of 24LC64 with write command
  32   1        while(I2C_Write_Byte(Device_Address_24LC64_EEPROM + 0) == 1)// Wait until device is free
  33   1        { I2C_Start();  }   
  34   1      
  35   1        I2C_Write_Byte(Address>>8);             // Write Address upper byte
  36   1        I2C_Write_Byte((unsigned char)Address);       // Write Address lower byte
  37   1        I2C_ReStart();                    // Restart i2c
  38   1      
  39   1        // Send i2c address of 24LC64 EEPROM with read command  
  40   1        I2C_Write_Byte(Device_Address_24LC64_EEPROM + 1);   
  41   1      
  42   1        Byte = I2C_Read_Byte();               // Read byte from EEPROM
  43   1      
  44   1        // Make SCK low, so that slave can stop driving SDA pin
  45   1        // Send a NACK to indiacate single byte read is complete
  46   1        I2C_Send_NACK();
  47   1      
  48   1        // Send start bit and then stop bit to stop transmission
  49   1        Set_SDA_Low;        // Make SDA Low
  50   1        __delay_us(HalfBitDelay); // Half bit delay
  51   1        Set_SDA_High;       // Make SDA high
  52   1        __delay_us(HalfBitDelay); // Half bit delay
  53   1      
  54   1        return Byte;        // Return the byte received from 24LC64 EEPROM
C51 COMPILER V9.60.7.0   24C02                                                             09/24/2024 16:44:00 PAGE 2   

  55   1      }
  56          
  57          
  58          
  59          // Function Purpose: Write_Page_To_24LC64_EEPROM writes a page on given address
  60          // Address can have value 0, 32, 64, .... only and pData is pointer to the array
  61          // containing NoOfBytes bytes in it. NoOfBytes can have a value from 1 to 32 only.
  62          void Write_Page_To_24LC64_EEPROM(unsigned int Address,unsigned char* pData,unsigned char NoOfBytes)
  63          {
  64   1        unsigned int i;
  65   1      
  66   1        I2C_Start();                    // Start i2c communication
  67   1      
  68   1        // Send i2c address of 24LC64 with write command
  69   1        while(I2C_Write_Byte(Device_Address_24LC64_EEPROM + 0) == 1)// Wait until device is free
  70   1        { I2C_Start();  } 
  71   1      
  72   1        I2C_Write_Byte(Address>>8);             // Write Address upper byte
  73   1        I2C_Write_Byte((unsigned char)Address);       // Write Address lower byte
  74   1      
  75   1        for(i=0;i<NoOfBytes;i++)              // Write NoOfBytes
  76   1          I2C_Write_Byte(pData[i]);           // Write data byte
  77   1      
  78   1        I2C_Stop();                     // Stop i2c communication
  79   1      }
  80          
  81          
  82          
  83          
  84          // Function Purpose: Read_Bytes_From_24LC64_EEPROM reads a NoOfBytes bytes from given starting address.
  85          // Address can have any value fromm 0 to 0x1FFF. Also, NoOfBytes can have any value 0 to 0x1FFF.
  86          // Read bytes are returned in pData array.
  87          void Read_Bytes_From_24LC64_EEPROM(unsigned int Address, unsigned char* pData, unsigned int NoOfBytes)
  88          {
  89   1        unsigned int i;
  90   1      
  91   1        I2C_Start();                    // Start i2c communication
  92   1      
  93   1        // Send i2c address of 24LC64 with write command
  94   1        while(I2C_Write_Byte(Device_Address_24LC64_EEPROM + 0) == 1)// Wait until device is free
  95   1        { I2C_Start();  }   
  96   1      
  97   1        I2C_Write_Byte(Address>>8);             // Write Address upper byte
  98   1        I2C_Write_Byte((unsigned char)Address);       // Write Address lower byte
  99   1        I2C_ReStart();                    // Restart i2c
 100   1      
 101   1        // Send i2c address of 24LC64 EEPROM with read command  
 102   1        I2C_Write_Byte(Device_Address_24LC64_EEPROM + 1);   
 103   1      
 104   1        pData[0] = I2C_Read_Byte();             // Read First byte from EEPROM
 105   1      
 106   1        for(i=1;i<NoOfBytes;i++)              // Read NoOfBytes
 107   1        {   
 108   2          I2C_Send_ACK();         // Give Ack to slave to start receiving next byte
 109   2          pData[i] = I2C_Read_Byte();   // Read next byte from EEPROM
 110   2        }
 111   1      
 112   1        // Make SCK low, so that slave can stop driving SDA pin
 113   1        // Send a NACK to indiacate read operation is complete
 114   1        I2C_Send_NACK();
 115   1      
 116   1        // Send start bit and then stop bit to stop transmission
C51 COMPILER V9.60.7.0   24C02                                                             09/24/2024 16:44:00 PAGE 3   

 117   1        Set_SDA_Low;        // Make SDA Low
 118   1        __delay_us(HalfBitDelay); // Half bit delay
 119   1        Set_SDA_High;       // Make SDA high
 120   1        __delay_us(HalfBitDelay); // Half bit delay
 121   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    317    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      23
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
